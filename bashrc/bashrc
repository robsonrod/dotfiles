#### General ####
export TERM='xterm-256color'
export EDITOR='emacs'
export PROJ_DIR='~/Projetos'
export MANPAGER='most'
export PAGER='less'
export BROWSER='firefox'
export FZF_DEFAULT_OPTS="--layout=reverse --inline-info"

PATH="$HOME/.local/bin":$PATH
GOPATH=$HOME/go
PATH=$GOPATH/bin:/usr/local/go/bin:$PATH

HISTCONTROL=ignoredups:erasedups
HISTSIZE=1000000
HISTFILESIZE=20000

PS1="\[$(tput bold)\]\[$(tput setaf 1)\][\[$(tput setaf 3)\]\u\[$(tput setaf 2)\]@\[$(tput setaf 4)\]\h \[$(tput setaf 5)\]\w\[$(tput setaf 1)\]]\[$(tput setaf 7)\]\\$ \[$(tput sgr0)\]"
#PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

shopt -s histappend
shopt -s checkwinsize
shopt -s expand_aliases

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# set a fancy prompt (non-color, unless we know we "want" color)
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|alacritty|st-256color|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac

# starship 
eval "$(starship init bash)"

# zoxide
eval "$(zoxide init bash)"

# asdf configuration
if [ -f ${HOME}/.asdf/asdf.sh ]; then
   . ${HOME}/.asdf/asdf.sh
   . ${HOME}/.asdf/completions/asdf.bash
fi

# prompt gpg password
export GPG_TTY=$(tty)

# git alias
alias gclo='git clone'
alias gadd='git add'
alias grm='git rm'
alias gall='git add ./'
alias gfth='git fetch --all --prune --verbose'
alias grst='git reset HEAD'
alias gmrg="git merge"
alias gsts='git status'
alias gpll='git pull'
alias gplp='git pull && git push'
alias gpsh='git push'
alias gcmm='git commit -v -m'
alias gbcm='git branch -m'
alias gbcd='git branch -D'
alias gchm='git checkout master'
alias gchb='git checkout -b'
alias glgr="git log --graph --pretty=format:'%C(bold)%h%Creset%C(magenta)%d%Creset %s %C(yellow)<%an> %C(cyan)(%cr)%Creset' --abbrev-commit --date=relative"
alias glgs="glgr --stat"
alias gstb="git stash branch"
alias gstd="git stash drop"
alias gstl="git stash list"
alias gstp="git stash pop"

# general aliases
alias g='git'
alias h='history'
alias v='vim'
alias e='emacs -nw'
alias cd='z'
alias grep='rg'
alias cat='bat'
alias find='fdfind'

alias p='cd ${PROJ_DIR}'
alias ..='cd ..' 
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ls='exa --color=always --group-directories-first'
alias la='exa -la --color=always --group-directories-first'
alias ll='exa -l --color=always --group-directories-first'
alias lt='exa -aT --color=always --group-directories-first'
alias tree='exa --tree'

alias up='sudo pacman -Suy'
alias install='sudo pacman -Sy'

## archive extraction function ##
### Usage: ex <file> ###
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

tkill() {
    tmux kill-server
}

opendebug () {
 logdt=`date +"%Y-%m-%d"`;
 dev=$1;
 geo=$3;

 log=~/tmp/logue/$2-$logdt;
 title=$4;

 shift 4;
 echo "putty -log $log.log -serial -sercfg 115200,8,n,1 ${dev} -geometry ${geo} -title \"${title}\" $@";
 putty -log $log.log -sl 2000 -serial -sercfg 115200,8,n,1 ${dev} -geometry ${geo} -title "${title}" $@ &
 echo "done."
}

opendebugusb () {
 opendebug /dev/ttyUSB1 shell 100x80+5290+20 "tty-shell - PuTTY ";
 opendebug /dev/ttyUSB0 print 80x80+5920+20 "tty-print - PuTTY "
}

if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi

if [ -f ~/Projetos/work/bash_work ]; then
   . ~/Projetos/work/bash_work
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
